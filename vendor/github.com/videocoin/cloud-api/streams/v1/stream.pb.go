// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams/v1/stream.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StreamStatus int32

const (
	StreamStatusNone       StreamStatus = 0
	StreamStatusNew        StreamStatus = 1
	StreamStatusPreparing  StreamStatus = 2
	StreamStatusPrepared   StreamStatus = 3
	StreamStatusPending    StreamStatus = 4
	StreamStatusProcessing StreamStatus = 5
	StreamStatusReady      StreamStatus = 6
	StreamStatusCompleted  StreamStatus = 7
	StreamStatusCancelled  StreamStatus = 8
	StreamStatusFailed     StreamStatus = 9
)

var StreamStatus_name = map[int32]string{
	0: "STREAM_STATUS_NONE",
	1: "STREAM_STATUS_NEW",
	2: "STREAM_STATUS_PREPARING",
	3: "STREAM_STATUS_PREPARED",
	4: "STREAM_STATUS_PENDING",
	5: "STREAM_STATUS_PROCESSING",
	6: "STREAM_STATUS_READY",
	7: "STREAM_STATUS_COMPLETED",
	8: "STREAM_STATUS_CANCELLED",
	9: "STREAM_STATUS_FAILED",
}

var StreamStatus_value = map[string]int32{
	"STREAM_STATUS_NONE":       0,
	"STREAM_STATUS_NEW":        1,
	"STREAM_STATUS_PREPARING":  2,
	"STREAM_STATUS_PREPARED":   3,
	"STREAM_STATUS_PENDING":    4,
	"STREAM_STATUS_PROCESSING": 5,
	"STREAM_STATUS_READY":      6,
	"STREAM_STATUS_COMPLETED":  7,
	"STREAM_STATUS_CANCELLED":  8,
	"STREAM_STATUS_FAILED":     9,
}

func (x StreamStatus) String() string {
	return proto.EnumName(StreamStatus_name, int32(x))
}

func (StreamStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{0}
}

type InputStatus int32

const (
	InputStatusNone    InputStatus = 0
	InputStatusPending InputStatus = 1
	InputStatusActive  InputStatus = 2
	InputStatusError   InputStatus = 3
)

var InputStatus_name = map[int32]string{
	0: "INPUT_STATUS_NONE",
	1: "INPUT_STATUS_PENDING",
	2: "INPUT_STATUS_ACTIVE",
	3: "INPUT_STATUS_ERROR",
}

var InputStatus_value = map[string]int32{
	"INPUT_STATUS_NONE":    0,
	"INPUT_STATUS_PENDING": 1,
	"INPUT_STATUS_ACTIVE":  2,
	"INPUT_STATUS_ERROR":   3,
}

func (x InputStatus) String() string {
	return proto.EnumName(InputStatus_name, int32(x))
}

func (InputStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{1}
}

type Stream struct {
	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"type:char(36);"`
	UserId                string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                  string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ProfileId             string       `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Status                StreamStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	InputStatus           InputStatus  `protobuf:"varint,6,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.streams.v1.InputStatus" json:"input_status,omitempty"`
	StreamContractId      uint64       `protobuf:"varint,8,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string       `protobuf:"bytes,9,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	InputUrl              string       `protobuf:"bytes,11,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	OutputUrl             string       `protobuf:"bytes,12,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	Refunded              bool         `protobuf:"varint,13,opt,name=refunded,proto3" json:"refunded,omitempty"`
	CreatedAt             *time.Time   `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	ReadyAt               *time.Time   `protobuf:"bytes,18,opt,name=ready_at,json=readyAt,proto3,stdtime" json:"ready_at,omitempty"`
	CompletedAt           *time.Time   `protobuf:"bytes,19,opt,name=completed_at,json=completedAt,proto3,stdtime" json:"completed_at,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{0}
}
func (m *Stream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return m.Size()
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stream) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Stream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stream) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *Stream) GetStatus() StreamStatus {
	if m != nil {
		return m.Status
	}
	return StreamStatusNone
}

func (m *Stream) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (m *Stream) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *Stream) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *Stream) GetInputUrl() string {
	if m != nil {
		return m.InputUrl
	}
	return ""
}

func (m *Stream) GetOutputUrl() string {
	if m != nil {
		return m.OutputUrl
	}
	return ""
}

func (m *Stream) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

func (m *Stream) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Stream) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Stream) GetReadyAt() *time.Time {
	if m != nil {
		return m.ReadyAt
	}
	return nil
}

func (m *Stream) GetCompletedAt() *time.Time {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (*Stream) XXX_MessageName() string {
	return "cloud.api.streams.v1.Stream"
}

type Streams struct {
	Items                []*Stream `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Streams) Reset()         { *m = Streams{} }
func (m *Streams) String() string { return proto.CompactTextString(m) }
func (*Streams) ProtoMessage()    {}
func (*Streams) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{1}
}
func (m *Streams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Streams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Streams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Streams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Streams.Merge(m, src)
}
func (m *Streams) XXX_Size() int {
	return m.Size()
}
func (m *Streams) XXX_DiscardUnknown() {
	xxx_messageInfo_Streams.DiscardUnknown(m)
}

var xxx_messageInfo_Streams proto.InternalMessageInfo

func (m *Streams) GetItems() []*Stream {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*Streams) XXX_MessageName() string {
	return "cloud.api.streams.v1.Streams"
}

type StreamProfile struct {
	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InputUrl              string       `protobuf:"bytes,4,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	OutputUrl             string       `protobuf:"bytes,5,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	StreamContractId      uint64       `protobuf:"varint,7,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string       `protobuf:"bytes,8,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	Status                StreamStatus `protobuf:"varint,9,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	InputStatus           InputStatus  `protobuf:"varint,10,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.streams.v1.InputStatus" json:"input_status,omitempty"`
	CreatedAt             *time.Time   `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	ReadyAt               *time.Time   `protobuf:"bytes,12,opt,name=ready_at,json=readyAt,proto3,stdtime" json:"ready_at,omitempty"`
	CompletedAt           *time.Time   `protobuf:"bytes,13,opt,name=completed_at,json=completedAt,proto3,stdtime" json:"completed_at,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *StreamProfile) Reset()         { *m = StreamProfile{} }
func (m *StreamProfile) String() string { return proto.CompactTextString(m) }
func (*StreamProfile) ProtoMessage()    {}
func (*StreamProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{2}
}
func (m *StreamProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamProfile.Merge(m, src)
}
func (m *StreamProfile) XXX_Size() int {
	return m.Size()
}
func (m *StreamProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamProfile.DiscardUnknown(m)
}

var xxx_messageInfo_StreamProfile proto.InternalMessageInfo

func (m *StreamProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamProfile) GetInputUrl() string {
	if m != nil {
		return m.InputUrl
	}
	return ""
}

func (m *StreamProfile) GetOutputUrl() string {
	if m != nil {
		return m.OutputUrl
	}
	return ""
}

func (m *StreamProfile) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *StreamProfile) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *StreamProfile) GetStatus() StreamStatus {
	if m != nil {
		return m.Status
	}
	return StreamStatusNone
}

func (m *StreamProfile) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (m *StreamProfile) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StreamProfile) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *StreamProfile) GetReadyAt() *time.Time {
	if m != nil {
		return m.ReadyAt
	}
	return nil
}

func (m *StreamProfile) GetCompletedAt() *time.Time {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (*StreamProfile) XXX_MessageName() string {
	return "cloud.api.streams.v1.StreamProfile"
}

type StreamProfiles struct {
	Items                []*StreamProfile `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StreamProfiles) Reset()         { *m = StreamProfiles{} }
func (m *StreamProfiles) String() string { return proto.CompactTextString(m) }
func (*StreamProfiles) ProtoMessage()    {}
func (*StreamProfiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b77e6ca64568e5, []int{3}
}
func (m *StreamProfiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamProfiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamProfiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamProfiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamProfiles.Merge(m, src)
}
func (m *StreamProfiles) XXX_Size() int {
	return m.Size()
}
func (m *StreamProfiles) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamProfiles.DiscardUnknown(m)
}

var xxx_messageInfo_StreamProfiles proto.InternalMessageInfo

func (m *StreamProfiles) GetItems() []*StreamProfile {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*StreamProfiles) XXX_MessageName() string {
	return "cloud.api.streams.v1.StreamProfiles"
}
func init() {
	proto.RegisterEnum("cloud.api.streams.v1.StreamStatus", StreamStatus_name, StreamStatus_value)
	golang_proto.RegisterEnum("cloud.api.streams.v1.StreamStatus", StreamStatus_name, StreamStatus_value)
	proto.RegisterEnum("cloud.api.streams.v1.InputStatus", InputStatus_name, InputStatus_value)
	golang_proto.RegisterEnum("cloud.api.streams.v1.InputStatus", InputStatus_name, InputStatus_value)
	proto.RegisterType((*Stream)(nil), "cloud.api.streams.v1.Stream")
	golang_proto.RegisterType((*Stream)(nil), "cloud.api.streams.v1.Stream")
	proto.RegisterType((*Streams)(nil), "cloud.api.streams.v1.Streams")
	golang_proto.RegisterType((*Streams)(nil), "cloud.api.streams.v1.Streams")
	proto.RegisterType((*StreamProfile)(nil), "cloud.api.streams.v1.StreamProfile")
	golang_proto.RegisterType((*StreamProfile)(nil), "cloud.api.streams.v1.StreamProfile")
	proto.RegisterType((*StreamProfiles)(nil), "cloud.api.streams.v1.StreamProfiles")
	golang_proto.RegisterType((*StreamProfiles)(nil), "cloud.api.streams.v1.StreamProfiles")
}

func init() { proto.RegisterFile("streams/v1/stream.proto", fileDescriptor_75b77e6ca64568e5) }
func init() { golang_proto.RegisterFile("streams/v1/stream.proto", fileDescriptor_75b77e6ca64568e5) }

var fileDescriptor_75b77e6ca64568e5 = []byte{
	// 932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0x4d, 0x6f, 0xe3, 0x44,
	0x1c, 0xc6, 0xd7, 0x69, 0x5e, 0x27, 0x69, 0x71, 0x27, 0x49, 0xeb, 0x35, 0x90, 0x9a, 0x70, 0xc9,
	0x56, 0xe0, 0x6e, 0xb3, 0x68, 0x05, 0x5d, 0x21, 0xe4, 0x26, 0x5e, 0x14, 0xd1, 0x4d, 0x23, 0x27,
	0x05, 0xc1, 0x25, 0x72, 0x3d, 0xd3, 0xac, 0x25, 0x27, 0xb6, 0xec, 0x71, 0xd1, 0x7e, 0x03, 0x94,
	0x13, 0x5f, 0x20, 0x27, 0x38, 0xf2, 0x09, 0x38, 0x21, 0x71, 0xd9, 0x23, 0x77, 0xa4, 0x05, 0x75,
	0xbf, 0x01, 0x9f, 0x00, 0xcd, 0x8c, 0xbd, 0xb1, 0xd3, 0xa8, 0x2a, 0xdb, 0x03, 0xb7, 0x79, 0x79,
	0x9e, 0xff, 0xbc, 0x3c, 0xbf, 0x3f, 0xd8, 0x0d, 0x88, 0x8f, 0xcd, 0x69, 0x70, 0x70, 0x79, 0x78,
	0xc0, 0x87, 0xaa, 0xe7, 0xbb, 0xc4, 0x85, 0x35, 0xcb, 0x71, 0x43, 0xa4, 0x9a, 0x9e, 0xad, 0x46,
	0x12, 0xf5, 0xf2, 0x50, 0xfe, 0x78, 0x62, 0x93, 0xe7, 0xe1, 0xb9, 0x6a, 0xb9, 0xd3, 0x83, 0x89,
	0x3b, 0x71, 0x0f, 0x98, 0xf8, 0x3c, 0xbc, 0x60, 0x33, 0x36, 0x61, 0x23, 0x5e, 0x44, 0xde, 0x9b,
	0xb8, 0xee, 0xc4, 0xc1, 0x4b, 0x15, 0xb1, 0xa7, 0x38, 0x20, 0xe6, 0xd4, 0xe3, 0x82, 0xe6, 0xef,
	0x39, 0x90, 0x1f, 0xb2, 0xf2, 0xf0, 0x01, 0xc8, 0xd8, 0x48, 0x12, 0x14, 0xa1, 0x55, 0x3a, 0xbe,
	0xff, 0xcf, 0xab, 0xbd, 0xfa, 0xc4, 0xf5, 0xa7, 0x47, 0x4d, 0xf2, 0xc2, 0xc3, 0x47, 0xd6, 0x73,
	0xd3, 0x6f, 0x3d, 0x7a, 0xfc, 0xe0, 0x49, 0xd3, 0xc8, 0xd8, 0x08, 0xee, 0x82, 0x42, 0x18, 0x60,
	0x7f, 0x6c, 0x23, 0x29, 0x43, 0xf5, 0x46, 0x9e, 0x4e, 0x7b, 0x08, 0x42, 0x90, 0x9d, 0x99, 0x53,
	0x2c, 0x6d, 0xb0, 0x55, 0x36, 0x86, 0xef, 0x03, 0xe0, 0xf9, 0xee, 0x85, 0xed, 0x60, 0xaa, 0xcf,
	0xb2, 0x9d, 0x52, 0xb4, 0xd2, 0x43, 0xf0, 0x08, 0xe4, 0x03, 0x62, 0x92, 0x30, 0x90, 0x72, 0x8a,
	0xd0, 0xda, 0x6a, 0x37, 0xd5, 0x75, 0x0f, 0x57, 0xf9, 0x25, 0x87, 0x4c, 0x69, 0x44, 0x0e, 0xd8,
	0x05, 0x15, 0x7b, 0xe6, 0x85, 0x64, 0x1c, 0x55, 0xc8, 0xb3, 0x0a, 0x1f, 0xac, 0xaf, 0xd0, 0xa3,
	0xca, 0xa8, 0x40, 0xd9, 0x5e, 0x4e, 0xe0, 0x47, 0x00, 0x72, 0xd9, 0xd8, 0x72, 0x67, 0xc4, 0x37,
	0x2d, 0x42, 0x2f, 0x5a, 0x54, 0x84, 0x56, 0xd6, 0x10, 0xf9, 0x4e, 0x27, 0xda, 0xe8, 0x21, 0xf8,
	0x38, 0x8e, 0x6c, 0xa9, 0x36, 0x11, 0xf2, 0x71, 0x10, 0x48, 0x25, 0xf6, 0xb6, 0x7a, 0xda, 0xa2,
	0xf1, 0x4d, 0xf8, 0x2e, 0x28, 0xf1, 0xbb, 0x86, 0xbe, 0x23, 0x95, 0x99, 0xb2, 0xc8, 0x16, 0xce,
	0x7c, 0x87, 0xfe, 0x91, 0x1b, 0x92, 0x78, 0xb7, 0xc2, 0xff, 0x88, 0xaf, 0xd0, 0x6d, 0x19, 0x14,
	0x7d, 0x7c, 0x11, 0xce, 0x10, 0x46, 0xd2, 0xa6, 0x22, 0xb4, 0x8a, 0xc6, 0x9b, 0x39, 0xfc, 0x02,
	0x00, 0xcb, 0xc7, 0x26, 0xc1, 0x68, 0x6c, 0x12, 0x49, 0x54, 0x84, 0x56, 0xb9, 0x2d, 0xab, 0x3c,
	0x77, 0x35, 0xce, 0x5d, 0x1d, 0xc5, 0xb9, 0x1f, 0x67, 0x7f, 0xfc, 0x6b, 0x4f, 0x30, 0x4a, 0x91,
	0x47, 0x23, 0xb4, 0x40, 0xe8, 0xa1, 0xb8, 0xc0, 0xf6, 0x6d, 0x0b, 0x44, 0x1e, 0x8d, 0xc0, 0x27,
	0xf4, 0x76, 0x26, 0x7a, 0x41, 0xed, 0xf0, 0x96, 0xf6, 0x02, 0x73, 0x68, 0x04, 0x76, 0x40, 0xc5,
	0x72, 0xa7, 0x9e, 0x83, 0xa3, 0xf3, 0xab, 0xb7, 0x2c, 0x50, 0x7e, 0xe3, 0xd2, 0x48, 0xf3, 0x73,
	0x50, 0xe0, 0x7c, 0x04, 0xb0, 0x0d, 0x72, 0x36, 0xc1, 0xd3, 0x40, 0x12, 0x94, 0x8d, 0x56, 0xb9,
	0xfd, 0xde, 0x4d, 0x34, 0x19, 0x5c, 0xda, 0xfc, 0x33, 0x0b, 0x36, 0xf9, 0xca, 0x80, 0x63, 0x09,
	0xb7, 0x96, 0xbd, 0xc0, 0x80, 0x8f, 0xb9, 0xce, 0x24, 0xb8, 0x4e, 0x05, 0x9a, 0xbd, 0x31, 0xd0,
	0xdc, 0x6a, 0xa0, 0xeb, 0x91, 0x2b, 0xfc, 0x77, 0xe4, 0x8a, 0x37, 0x21, 0xb7, 0x6c, 0xad, 0xd2,
	0x9d, 0x5b, 0x0b, 0xbc, 0x55, 0x6b, 0xa5, 0xe1, 0x2c, 0xff, 0xcf, 0x70, 0x56, 0xee, 0x0a, 0xe7,
	0xe6, 0xdb, 0xc0, 0xf9, 0x15, 0xd8, 0x4a, 0xc1, 0x15, 0xc0, 0xcf, 0xd2, 0x8c, 0x7e, 0x78, 0x53,
	0x2c, 0x91, 0x29, 0x42, 0x75, 0xff, 0x97, 0x2c, 0xa8, 0x24, 0xf3, 0xa2, 0x24, 0x0d, 0x47, 0x86,
	0xae, 0x3d, 0x1b, 0x0f, 0x47, 0xda, 0xe8, 0x6c, 0x38, 0xee, 0x9f, 0xf6, 0x75, 0xf1, 0x9e, 0x5c,
	0x9b, 0x2f, 0x14, 0x31, 0xa9, 0xec, 0xbb, 0x33, 0x0c, 0xf7, 0xc1, 0xf6, 0x8a, 0x5a, 0xff, 0x46,
	0x14, 0xe4, 0xea, 0x7c, 0xa1, 0xbc, 0x93, 0x12, 0xe3, 0xef, 0x29, 0x75, 0x69, 0xed, 0xc0, 0xd0,
	0x07, 0x9a, 0xd1, 0xeb, 0x7f, 0x29, 0x66, 0xe4, 0xfb, 0xf3, 0x85, 0x52, 0x4f, 0x3a, 0x06, 0x3e,
	0xf6, 0x4c, 0xdf, 0x9e, 0x4d, 0xe0, 0x27, 0x60, 0x67, 0x9d, 0x4f, 0xef, 0x8a, 0x1b, 0xb2, 0x34,
	0x5f, 0x28, 0xb5, 0xeb, 0x36, 0x8c, 0x60, 0x1b, 0xd4, 0x57, 0x5c, 0x7a, 0xbf, 0x4b, 0xcf, 0xca,
	0xca, 0xbb, 0xf3, 0x85, 0x52, 0x4d, 0x99, 0xf0, 0x0c, 0xd1, 0x93, 0x3e, 0x05, 0xd2, 0xea, 0x49,
	0xa7, 0x1d, 0x7d, 0x38, 0xa4, 0xb6, 0x9c, 0x2c, 0xcf, 0x17, 0xca, 0x4e, 0xfa, 0x2c, 0xd7, 0xc2,
	0x41, 0x40, 0x9d, 0x2a, 0xa8, 0xa6, 0x9d, 0x86, 0xae, 0x75, 0xbf, 0x15, 0xf3, 0x72, 0x7d, 0xbe,
	0x50, 0xb6, 0x53, 0x0d, 0x41, 0x51, 0xb8, 0xfe, 0x17, 0x9d, 0xd3, 0x67, 0x83, 0x13, 0x7d, 0xa4,
	0x77, 0xc5, 0xc2, 0xf5, 0xbf, 0xe8, 0xc4, 0xe9, 0xaf, 0xf1, 0x69, 0xfd, 0x8e, 0x7e, 0x72, 0xa2,
	0x77, 0xc5, 0xe2, 0x1a, 0x9f, 0x39, 0xb3, 0xb0, 0xe3, 0x60, 0x04, 0x1f, 0x82, 0x5a, 0xda, 0xf7,
	0x54, 0xeb, 0x51, 0x53, 0x49, 0xde, 0x99, 0x2f, 0x14, 0x98, 0x34, 0x3d, 0x35, 0x6d, 0x07, 0x23,
	0xb9, 0xf6, 0xc3, 0x4f, 0x8d, 0x7b, 0xbf, 0xfe, 0xdc, 0x48, 0xd1, 0xb1, 0xff, 0x4a, 0x00, 0xe5,
	0x44, 0x73, 0xd2, 0xfc, 0x7b, 0xfd, 0xc1, 0xd9, 0x68, 0x05, 0x16, 0x96, 0x7f, 0x42, 0xc7, 0x58,
	0x79, 0x08, 0x6a, 0x29, 0x6d, 0x1c, 0x88, 0xc0, 0xef, 0x90, 0x90, 0xc7, 0x79, 0xa8, 0xa0, 0x9a,
	0x72, 0x68, 0x9d, 0x51, 0xef, 0x6b, 0x5d, 0xcc, 0xf0, 0x5f, 0x4d, 0x18, 0x34, 0x8b, 0xd8, 0x97,
	0x98, 0xb2, 0x9b, 0xd2, 0xeb, 0x86, 0x71, 0x6a, 0x88, 0x1b, 0x9c, 0xdd, 0x84, 0x5c, 0xf7, 0x7d,
	0xd7, 0x97, 0xab, 0xd1, 0x0b, 0x93, 0x0f, 0x3a, 0x96, 0x5e, 0x5e, 0x35, 0x84, 0x3f, 0xae, 0x1a,
	0xc2, 0xdf, 0x57, 0x0d, 0xe1, 0xb7, 0xd7, 0x0d, 0xe1, 0xe5, 0xeb, 0x86, 0xf0, 0x5d, 0xe6, 0xf2,
	0xf0, 0x3c, 0xcf, 0xba, 0xf3, 0xd1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x2e, 0xb4, 0x44,
	0x61, 0x09, 0x00, 0x00,
}

func (m *Stream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ProfileId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.ProfileId)))
		i += copy(dAtA[i:], m.ProfileId)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Status))
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.InputStatus))
	}
	if m.StreamContractId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.StreamContractId))
	}
	if len(m.StreamContractAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.StreamContractAddress)))
		i += copy(dAtA[i:], m.StreamContractAddress)
	}
	if len(m.InputUrl) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.InputUrl)))
		i += copy(dAtA[i:], m.InputUrl)
	}
	if len(m.OutputUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.OutputUrl)))
		i += copy(dAtA[i:], m.OutputUrl)
	}
	if m.Refunded {
		dAtA[i] = 0x68
		i++
		if m.Refunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.ReadyAt != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)))
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReadyAt, dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.CompletedAt != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)))
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CompletedAt, dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Streams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Streams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.InputUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.InputUrl)))
		i += copy(dAtA[i:], m.InputUrl)
	}
	if len(m.OutputUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.OutputUrl)))
		i += copy(dAtA[i:], m.OutputUrl)
	}
	if m.StreamContractId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.StreamContractId))
	}
	if len(m.StreamContractAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.StreamContractAddress)))
		i += copy(dAtA[i:], m.StreamContractAddress)
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Status))
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.InputStatus))
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.ReadyAt != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)))
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReadyAt, dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.CompletedAt != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)))
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CompletedAt, dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStream(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamProfiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamProfiles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Stream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStream(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovStream(uint64(m.InputStatus))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovStream(uint64(m.StreamContractId))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.InputUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.OutputUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Refunded {
		n += 2
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovStream(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovStream(uint64(l))
	}
	if m.ReadyAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)
		n += 2 + l + sovStream(uint64(l))
	}
	if m.CompletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)
		n += 2 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Streams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.InputUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.OutputUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovStream(uint64(m.StreamContractId))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStream(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovStream(uint64(m.InputStatus))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ReadyAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)
		n += 1 + l + sovStream(uint64(l))
	}
	if m.CompletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)
		n += 1 + l + sovStream(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamProfiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= InputStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refunded = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadyAt == nil {
				m.ReadyAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReadyAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CompletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Streams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Streams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Streams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Stream{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= InputStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadyAt == nil {
				m.ReadyAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReadyAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CompletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamProfiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamProfiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamProfiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &StreamProfile{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStream
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStream
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStream(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStream
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStream = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream   = fmt.Errorf("proto: integer overflow")
)
